
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = "https://xjxxuqqyjqzgmvtgrpgv.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhqeHh1cXF5anF6Z212dGdycGd2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE1MTEwNTksImV4cCI6MjA1NzA4NzA1OX0.ENwkIBR2DQBztLNrZB7oZ3JQ1zRKEAXWfyDTtjqPzOI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

/**
 * Check connection to Supabase by making a simple query
 */
export const checkSupabaseConnection = async (): Promise<boolean> => {
  try {
    const { error } = await supabase.from('profiles').select('count', { count: 'exact', head: true });
    return !error;
  } catch (e) {
    console.error('Supabase connection check failed:', e);
    return false;
  }
};

/**
 * Helper to retry Supabase API calls with configurable retry logic
 */
export const withRetry = async <T>(
  fn: () => Promise<T>,
  options: {
    retries?: number;
    delay?: number;
    showToastOnError?: boolean;
    errorMessage?: string;
  } = {}
): Promise<T> => {
  const { 
    retries = 3, 
    delay = 500, 
    showToastOnError = false,
    errorMessage = 'Operation failed'
  } = options;
  
  let lastError: any;
  
  for (let attempt = 0; attempt < retries; attempt++) {
    try {
      return await fn();
    } catch (error) {
      console.error(`Attempt ${attempt + 1}/${retries} failed:`, error);
      lastError = error;
      
      if (attempt < retries - 1) {
        // Wait before the next attempt with exponential backoff
        await new Promise(resolve => setTimeout(resolve, delay * Math.pow(2, attempt)));
      }
    }
  }
  
  // All attempts failed
  if (showToastOnError) {
    toast.error(errorMessage, {
      description: lastError?.message || 'Please try again later'
    });
  }
  
  throw lastError;
};
